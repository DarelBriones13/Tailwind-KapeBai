settings/UTCAllow:::3184BBFA4EE2C46C"},{"op":"replace","path":"/settings/UTCAllow:::318794DF58890DE0","value":3},{"op":"add","path":"/settings/UTCAllow:::31880902EC164109","value":1},{"op":"replace","path":"/settings/UTCAllow:::318C68FE217D10EA","value":3},{"op":"replace","path":"/settings/UTCAllow:::318D6407F6BC5219","value":3},{"op":"add","path":"/settings/UTCAllow:::318FBE0AB443795D","value":3},{"op":"add","path":"/settings/UTCAllow:::3191F621B187314F","value":3},{"op":"add","path":"/settings/UTCAllow:::31941DE0C1EE6A19","value":1},{"op":"add","path":"/settings/UTCAllow:::3195B4ECDE412A3D","value":2},{"op":"remove","path":"/settings/UTCAllow:::31973238CDAEFCEB"},{"op":"replace","path":"/settings/UTCAllow:::3197B90A59DA132F","value":3},{"op":"replace","path":"/settings/UTCAllow:::3198F662D3DCC2FA","value":3},{"op":"replace","path":"/settings/UTCAllow:::31A00080183ACF00","value":3},{"op":"replace","path":"/settings/UTCAllow:::31A113E92AB310DF","value":3},{"op":"add","path":"/settings/UTCAllow:::31A371EA5E4F773D","value":5},{"op":"replace","path":"/settings/UTCAllow:::31A546C63E4DC9C2","value":3},{"op":"add","path":"/settings/UTCAllow:::31AE1A6C6AEB435E","value":3},{"op":"replace","path":"/settings/UTCAllow:::31AFFB04111E8D4B","value":3},{"op":"add","path":"/settings/UTCAllow:::31B5B4FD16DA4284","value":2},{"op":"replace","path":"/settings/UTCAllow:::31B6D422A46253EB","value":3},{"op":"add","path":"/settings/UTCAllow:::31BC8AAC99356877","value":3},{"op":"add","path":"/settings/UTCAllow:::31C03733972F82FA","value":4},{"op":"replace","path":"/settings/UTCAllow:::31C27C47D2F285D4","value":3},{"op":"add","path":"/settings/UTCAllow:::31C76E7A6CBCE21E","value":2},{"op":"add","path":"/settings/UTCAllow:::31CB29886B481B44","value":3},{"op":"add","path":"/settings/UTCAllow:::31CE803E91BC11CC","value":3},{"op":"replace","path":"/settings/UTCAllow:::31D2654D02BB2DC3","value":3},{"op":"add","path":"/settings/UTCAllow:::31D2D1F65344548F","value":2},{"op":"replace","path":"/settings/UTCAllow:::31D4505A99FA5623","value":3},{"op":"replace","path":"/settings/UTCAllow:::31D4DCCBE37921E0","value":3},{"op":"add","path":"/settings/UTCAllow:::31D5DC203F7CE0C2","value":2},{"op":"add","path":"/settings/UTCAllow:::31D85584DBA25A14","value":3},{"op":"add","path":"/settings/UTCAllow:::31D865CB60401C48","value":2},{"op":"replace","path":"/settings/UTCAllow:::31D879977713086C","value":3},{"op":"add","path":"/settings/UTCAllow:::31D91662CB830FC9","value":2},{"op":"add","path":"/settings/UTCAllow:::31D91BE5DF31B11F","value":1},{"op":"replace","path":"/settings/UTCAllow:::31DD3893C366BAA0","value":3},{"op":"add","path":"/settings/UTCAllow:::31DD70C4766B2BA7","value":2},{"op":"replace","path":"/settings/UTCAllow:::31DDE39A49D1F0F9","value":3},{"op":"add","path":"/settings/UTCAllow:::31DE5F8896FAEC30","value":2},{"op":"add","path":"/settings/UTCAllow:::31E0A9527BBB755C","value":2},{"op":"replace","path":"/settings/UTCAllow:::31E0C0277974A9C4","value":3},{"op":"replace","path":"/settings/UTCAllow:::31E2274EBD907822","value":3},{"op":"replace","path":"/settings/UTCAllow:::31E8CA8B0F593F25","value":3},{"op":"add","path":"/settings/UTCAllow:::31E99867948B5A4C","value":2},{"op":"add","path":"/settings/UTCAllow:::31EB474ED308683C","value":1},{"op":"replace","path":"/settings/UTCAllow:::31EB7347AB7AE4F6","value":3},{"op":"add","path":"/settings/UTCAllow:::31EC6EBF9693CCF0","value":1},{"op":"replace","path":"/settings/UTCAllow:::31ED42183C2756E0","value":3},{"op":"remove","path":"/settings/UTCAllow:::31ED8BA278D44B1C"},{"op":"replace","path":"/settings/UTCAllow:::31EFF39E6455E1BD","value":3},{"op":"replace","path":"/settings/UTCAllow:::31F06F436281EE0F","value":3},{"op":"add","path":"/settings/UTCAllow:::31F159FDE57130E5","value":1},{"op":"replace","path":"/settings/UTCAllow:::31F327A6A751BBE5","value":3},{"op":"add","path":"/settings/UTCAllow:::31F6E71B29C577BC","value":1},{"op":"replace","path":"/settings/UTCAllow:::31F8C9BE149B3384","value":3},{"op":"add","path":"/settings/UTCAllow:::31FB0B48A6796D3D","value":2},{"op":"add","path":"/settings/UTCAllow:::31FE6E59C5561CAB","value":1},{"op":"replace","path":"/settings/UTCAllow:::3200E0E42BF6FA29","value":3},{"op":"replace","path":"/settings/UTCAllow:::320311B24A3364B6","value":3},{"op":"replace","path":"/settings/UTCAllow:::32034019C62EAD38","value":3},{"op":"replace","path":"/settings/UTCAllow:::321153C9B354F2A4","value":3},{"op":"replace","path":"/settings/UTCAllow:::3212C8BF921FEFD2","value":4},{"op":"replace","path":"/settings/UTCAllow:::32146C3F087F2F03","value":3},{"op":"add","path":"/settings/UTCAllow:::3214B95929A9F796","value":1},{"op":"replace","path":"/settings/UTCAllow:::321573C17B7351AD","value":3},{"op":"replace","path":"/settings/UTCAllow:::321DDF73F3F65947","value":3},{"op":"add","path":"/settings/UTCAllow:::321EB5ED2D6A814C","value":2},{"op":"add","path":"/settings/UTCAllow:::3221DC03EAB1E8D2","value":1},{"op":"replace","path":"/settings/UTCAllow:::32222FD3EA1B07CA","value":3},{"op":"add","path":"/settings/UTCAllow:::32234F1DC3237281","value":1},{"op":"replace","path":"/settings/UTCAllow:::32236E7275EFC7FE","value":3},{"op":"add","path":"/settings/UTCAllow:::32244F0BCF1DF3D3","value":2},{"op":"add","path":"/settings/UTCAllow:::3226C85B6A523C56","value":2},{"op":"replace","path":"/settings/UTCAllow:::322A208F487C1B2F","value":3},{"op":"add","path":"/settings/UTCAllow:::3231C37BA4AB4A6D","value":2},{"op":"add","path":"/settings/UTCAllow:::3237A76B12FA5BD0","value":3},{"op":"replace","path":"/settings/UTCAllow:::3238E102487A3EF8","value":3},{"op":"replace","path":"/settings/UTCAllow:::323A3422AFD098CE","value":3},{"op":"replace","path":"/settings/UTCAllow:::323B4BC0C31FAAC1","value":3},{"op":"add","path":"/settings/UTCAllow:::323D80DA1AD4CB6F","value":3},{"op":"add","path":"/settings/UTCAllow:::323F984D50847459","value":3},{"op":"replace","path":"/settings/UTCAllow:::324345781929709C","value":3},{"op":"replace","path":"/settings/UTCAllow:::32480F98B88D5FAE","value":3},{"op":"add","path":"/settings/UTCAllow:::32499BABD62A405C","value":2},{"op":"add","path":"/settings/UTCAllow:::324B68172387232B","value":1},{"op":"replace","path":"/settings/UTCAllow:::324E102514D56795","value":3},{"op":"add","path":"/settings/UTCAllow:::324E2A3F84110C08","value":2},{"op":"replace","path":"/settings/UTCAllow:::324E705F67F44535","value":3},{"op":"replace","path":"/settings/UTCAllow:::32500AA9D272EEDD","value":3},{"op":"replace","path":"/settings/UTCAllow:::32515D046BDEA24A","value":3},{"op":"replace","path":"/settings/UTCAllow:::325166D3560EFE0E","value":3},{"op":"add","path":"/settings/UTCAllow:::32533D3339684FF6","value":5},{"op":"add","path":"/settings/UTCAllow:::3256CF6C676D3ADA","value":1},{"op":"replace","path":"/settings/UTCAllow:::325EC2C30F1FA7E7","value":3},{"op":"replace","path":"/settings/UTCAllow:::325EC6DDE192E41C","value":3},{"op":"replace","path":"/settings/UTCAllow:::32643A7026FDCF1D","value":3},{"op":"replace","path":"/settings/UTCAllow:::326613E7F5467723","value":3},{"op":"add","path":"/settings/UTCAllow:::326727EB04A9943A","value":2},{"op":"add","path":"/settings/UTCAllow:::32672E4F99C354B2","value":1},{"op":"add","path":"/settings/UTCAllow:::32676031200BE256","value":1},{"op":"replace","path":"/settings/UTCAllow:::3268E724B5769DF6","value":3},{"op":"add","path":"/settings/UTCAllow:::326CD80C1BF40EA1","value":1},{"op":"replace","path":"/settings/UTCAllow:::327258E5474CD732","value":3},{"op":"replace","path":"/settings/UTCAllow:::3273D624CC76DC26","value":3},{"op":"add","path":"/settings/UTCAllow:::3273FDA8D15F737C","value":1},{"op":"add","path":"/settings/UTCAllow:::32762F88A3E36C5C","value":3},{"op":"replace","path":"/settings/UTCAllow:::327DB5ADC24C1FDC","value":3},{"op":"replace","path":"/settings/UTCAllow:::328080B7C9E003E7","value":3},{"op":"add","path":"/settings/UTCAllow:::3280C9423D199327","value":2},{"op":"replace","path":"/settings/UTCAllow:::3280CBE9DF3F1686","value":3},{"op":"add","path":"/settings/UTCAllow:::32889890B2A05DAA","value":5},{"op":"replace","path":"/settings/UTCAllow:::328AE397A0CF1C19","value":3},{"op":"add","path":"/settings/UTCAllow:::328DF5F578E09DA5","value":1},{"op":"replace","path":"/settings/UTCAllow:::328F0792F28174E4","value":3},{"op":"replace","path":"/settings/UTCAllow:::3294C97FF05C05AE","value":3},{"op":"add","path":"/settings/UTCAllow:::3295D41A81758557","value":1},{"op":"replace","path":"/settings/UTCAllow:::3299579A6A0BF134","value":3},{"op":"add","path":"/settings/UTCAllow:::3299C8A387FB1393","value":2},{"op":"replace","path":"/settings/UTCAllow:::329BCA1DA418EF52","value":3},{"op":"replace","path":"/settings/UTCAllow:::32A73004A48A27BA","value":3},{"op":"add","path":"/settings/UTCAllow:::32A9F61247B71E1A","value":1},{"op":"replace","path":"/settings/UTCAllow:::32AC7593F69B6731","value":3},{"op":"add","path":"/settings/UTCAllow:::32B08D6A82B7BE7A","value":1},{"op":"add","path":"/settings/UTCAllow:::32B2E081D6E73DB6","value":2},{"op":"add","path":"/settings/UTCAllow:::32B442BF668C4A6E","value":1},{"op":"add","path":"/settings/UTCAllow:::32B6766FDC53D894","value":1},{"op":"replace","path":"/settings/UTCAllow:::32B68A3B845745ED","value":3},{"op":"add","path":"/settings/UTCAllow:::32B6BD7A7BA82C77","value":3},{"op":"add","path":"/settings/UTCAllow:::32BA370A9D0EC57C","value":2},{"op":"add","path":"/settings/UTCAllow:::32BA6B9157680916","value":1},{"op":"add","path":"/settings/UTCAllow:::32BAF9B0A2FC5628","value":1},{"op":"add","path":"/settings/UTCAllow:::32BBBF1FA0C0DAC4","value":1},{"op":"replace","path":"/settings/UTCAllow:::32BCFA34E6309B9F","value":3},{"op":"replace","path":"/settings/UTCAllow:::32BD5B1F14CAD066","value":3},{"op":"add","path":"/settings/UTCAllow:::32BD7927AEE5DC4C","value":1},{"op":"replace","path":"/settings/UTCAllow:::32BEA83C186BC892","value":3},{"op":"add","path":"/settings/UTCAllow:::32C04F0FA1EF51A1","value":1},{"op":"add","path":"/settings/UTCAllow:::32C0F5B754C741A2","value":1},{"op":"add","path":"/settings/UTCAllow:::32C12554EE9BA5C4","value":1},{"op":"add","path":"/settings/UTCAllow:::32C6503FD5DD0EEC","value":1},{"op":"replace","path":"/settings/UTCAllow:::32C710903A9BA761","value":3},{"op":"add","path":"/settings/UTCAllow:::32C7F2EF7C38F0C8","value":3},{"op":"add","path":"/settings/UTCAllow:::32C93F7CB29C7392","value":2},{"op":"add","path":"/settings/UTCAllow:::32CAFC4AA4DDDFBC","value":2},{"op":"replace","path":"/settings/UTCAllow:::32CD02FDDE648126","value":3},{"op":"add","path":"/settings/UTCAllow:::32D00ECC7DD63D55","value":1},{"op":"replace","path":"/settings/UTCAllow:::32D06331CF3F75D9","value":3},{"op":"add","path":"/settings/UTCAllow:::32D14153A9F01282","value":3},{"op":"add","path":"/settings/UTCAllow:::32D151F23E2D736D","value":2},{"op":"replace","path":"/settings/UTCAllow:::32D1D139FE2B9D39","value":3},{"op":"add","path":"/settings/UTCAllow:::32D35B7C303433E5","value":2},{"op":"replace","path":"/settings/UTCAllow:::32D74B21C865A02E","value":3},{"op":"replace","path":"/settings/UTCAllow:::32D90074AB7101FA","value":3},{"op":"add","path":"/settings/UTCAllow:::32E194B3CAA746E6","value":1},{"op":"replace","path":"/settings/UTCAllow:::32E2D6D20B19F4A6","value":3},{"op":"add","path":"/settings/UTCAllow:::32E47642976E1FE2","value":1},{"op":"replace","path":"/settings/UTCAllow:::32E927A31EEAF744","value":5},{"op":"replace","path":"/settings/UTCAllow:::32E95297556C7BB6","value":3},{"op":"add","path":"/settings/UTCAllow:::32ECA3A31A4B321F","value":1},{"op":"add","path":"/settings/UTCAllow:::32EDC4A673813724","value":1},{"op":"replace","path":"/settings/UTCAllow:::32EF7C26BB23CFD4","value":3},{"op":"add","path":"/settings/UTCAllow:::32F3435D371A2B86","value":1},{"op":"add","path":"/settings/UTCAllow:::32FB158524AE5FBB","value":1},{"op":"add","path":"/settings/UTCAllow:::33007F7DFEBA7BBC","value":2},{"op":"add","path":"/settings/UTCAllow:::3300D39B6E004661","value":1},{"op":"add","path":"/settings/UTCAllow:::330334BB45C2376A","value":1},{"op":"replace","path":"/settings/UTCAllow:::33037CBD41354934","value":3},{"op":"add","path":"/settings/UTCAllow:::3303D6DE11F5AEAD","value":2},{"op":"replace","path":"/settings/UTCAllow:::33045C710813A24A","value":3},{"op":"add","path":"/settings/UTCAllow:::33087090BADA62F3","value":3},{"op":"add","path":"/settings/UTCAllow:::33AAE,CAAC,CAAA;YAC9D,CAAC,CAAC,CAAA;SACH;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAA;SAC7D;QACD,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAED,UAAU;QACR,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;YACzB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAA;SACtB;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAA;QACnE,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;CACF;AA9CD,gCA8CC","sourcesContent":["/**\n * Single-use utility classes to provide functionality to the {@link Glob}\n * methods.\n *\n * @module\n */\nimport { Minipass } from 'minipass'\nimport { Path } from 'path-scurry'\nimport { Ignore, IgnoreLike } from './ignore.js'\n\n// XXX can we somehow make it so that it NEVER processes a given path more than\n// once, enough that the match set tracking is no longer needed?  that'd speed\n// things up a lot.  Or maybe bring back nounique, and skip it in that case?\n\n// a single minimatch set entry with 1 or more parts\nimport { Pattern } from './pattern.js'\nimport { Processor } from './processor.js'\n\nexport interface GlobWalkerOpts {\n  absolute?: boolean\n  allowWindowsEscape?: boolean\n  cwd?: string | URL\n  dot?: boolean\n  dotRelative?: boolean\n  follow?: boolean\n  ignore?: string | string[] | IgnoreLike\n  mark?: boolean\n  matchBase?: boolean\n  // Note: maxDepth here means \"maximum actual Path.depth()\",\n  // not \"maximum depth beyond cwd\"\n  maxDepth?: number\n  nobrace?: boolean\n  nocase?: boolean\n  nodir?: boolean\n  noext?: boolean\n  noglobstar?: boolean\n  platform?: NodeJS.Platform\n  posix?: boolean\n  realpath?: boolean\n  root?: string\n  stat?: boolean\n  signal?: AbortSignal\n  windowsPathsNoEscape?: boolean\n  withFileTypes?: boolean\n}\n\nexport type GWOFileTypesTrue = GlobWalkerOpts & {\n  withFileTypes: true\n}\nexport type GWOFileTypesFalse = GlobWalkerOpts & {\n  withFileTypes: false\n}\nexport type GWOFileTypesUnset = GlobWalkerOpts & {\n  withFileTypes?: undefined\n}\n\nexport type Result<O extends GlobWalkerOpts> = O extends GWOFileTypesTrue\n  ? Path\n  : O extends GWOFileTypesFalse\n  ? string\n  : O extends GWOFileTypesUnset\n  ? string\n  : Path | string\n\nexport type Matches<O extends GlobWalkerOpts> = O extends GWOFileTypesTrue\n  ? Set<Path>\n  : O extends GWOFileTypesFalse\n  ? Set<string>\n  : O extends GWOFileTypesUnset\n  ? Set<string>\n  : Set<Path | string>\n\nexport type MatchStream<O extends GlobWalkerOpts> =\n  O extends GWOFileTypesTrue\n    ? Minipass<Path, Path>\n    : O extends GWOFileTypesFalse\n    ? Minipass<string, string>\n    : O extends GWOFileTypesUnset\n    ? Minipass<string, string>\n    : Minipass<Path | string, Path | string>\n\nconst makeIgnore = (\n  ignore: string | string[] | IgnoreLike,\n  opts: GlobWalkerOpts\n): IgnoreLike =>\n  typeof ignore === 'string'\n    ? new Ignore([ignore], opts)\n    : Array.isArray(ignore)\n    ? new Ignore(ignore, opts)\n    : ignore\n\n/**\n * basic walking utilities that all the glob walker types use\n */\nexport abstract class GlobUtil<O extends GlobWalkerOpts = GlobWalkerOpts> {\n  path: Path\n  patterns: Pattern[]\n  opts: O\n  seen: Set<Path> = new Set<Path>()\n  paused: boolean = false\n  aborted: boolean = false\n  #onResume: (() => any)[] = []\n  #ignore?: IgnoreLike\n  #sep: '\\\\' | '/'\n  signal?: AbortSignal\n  maxDepth: number\n\n  constructor(patterns: Pattern[], path: Path, opts: O)\n  constructor(patterns: Pattern[], path: Path, opts: O) {\n    this.patterns = patterns\n    this.path = path\n    this.opts = opts\n    this.#sep = !opts.posix && opts.platform === 'win32' ? '\\\\' : '/'\n    if (opts.ignore) {\n      this.#ignore = makeIgnore(opts.ignore, opts)\n    }\n    // ignore, always set with maxDepth, but it's optional on the\n    // GlobOptions type\n    /* c8 ignore start */\n    this.maxDepth = opts.maxDepth || Infinity\n    /* c8 ignore stop */\n    if (opts.signal) {\n      this.signal = opts.signal\n      this.signal.addEventListener('abort', () => {\n        this.#onResume.length = 0\n      })\n    }\n  }\n\n  #ignored(path: Path): boolean {\n    return this.seen.has(path) || !!this.#ignore?.ignored?.(path)\n  }\n  #childrenIgnored(path: Path): boolean {\n    return !!this.#ignore?.childrenIgnored?.(path)\n  }\n\n  // backpressure mechanism\n  pause() {\n    this.paused = true\n  }\n  resume() {\n    /* c8 ignore start */\n    if (this.signal?.aborted) return\n    /* c8 ignore stop */\n    this.paused = false\n    let fn: (() => any) | undefined = undefined\n    while (!this.paused && (fn = this.#onResume.shift())) {\n      fn()\n    }\n  }\n  onResume(fn: () => any) {\n    if (this.signal?.aborted) return\n    /* c8 ignore start */\n    if (!this.paused) {\n      fn()\n    } else {\n      /* c8 ignore stop */\n      this.#onResume.push(fn)\n    }\n  }\n\n  // do the requisite realpath/stat checking, and return the path\n  // to add or undefined to filter it out.\n  async matchCheck(e: Path, ifDir: boolean): Promise<Path | undefined> {\n    if (ifDir && this.opts.nodir) return undefined\n    let rpc: Path | undefined\n    if (this.opts.realpath) {\n      rpc = e.realpathCached() || (await e.realpath())\n      if (!rpc) return undefined\n      e = rpc\n    }\n    const needStat = e.isUnknown() || this.opts.stat\n    const s = needStat ? await e.lstat() : e\n    if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {\n      const target = await s.realpath()\n      /* c8 ignore start */\n      if (target && (target.isUnknown() || this.opts.stat)) {\n        await target.lstat()\n      }\n      /* c8 ignore stop */\n    }\n    return this.matchCheckTest(s, ifDir)\n  }\n\n  matchCheckTest(e: Path | undefined, ifDir: boolean): Path | undefined {\n    return e &&\n      (this.maxDepth === Infinity || e.depth() <= this.maxDepth) &&\n      (!ifDir || e.canReaddir()) &&\n      (!this.opts.nodir || !e.isDirectory()) &&\n      (!this.opts.nodir ||\n        !this.opts.follow ||\n        !e.isSymbolicLink() ||\n        !e.realpathCached()?.isDirectory()) &&\n      !this.#ignored(e)\n      ? e\n      : undefined\n  }\n\n  matchCheckSync(e: Path, ifDir: boolean): Path | undefined {\n    if (ifDir && this.opts.nodir) return undefined\n    let rpc: Path | undefined\n    if (this.opts.realpath) {\n      rpc = e.realpathCached() || e.realpathSync()\n      if (!rpc) return undefined\n      e = rpc\n    }\n    const needStat = e.isUnknown() || this.opts.stat\n    const s = needStat ? e.lstatSync() : e\n    if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {\n      const target = s.realpathSync()\n      if (target && (target?.isUnknown() || this.opts.stat)) {\n        target.lstatSync()\n      }\n    }\n    return this.matchCheckTest(s, ifDir)\n  }\n\n  abstract matchEmit(p: Result<O>): void\n  abstract matchEmit(p: string | Path): void\n\n  matchFinish(e: Path, absolute: boolean) {\n    if (this.#ignored(e)) return\n    const abs =\n      this.opts.absolute === undefined ? absolute : this.opts.absolute\n    this.seen.add(e)\n    const mark = this.opts.mark && e.isDirectory() ? this.#sep : ''\n    // ok, we have what we need!\n    if (this.opts.withFileTypes) {\n      this.matchEmit(e)\n    } else if (abs) {\n      const abs = this.opts.posix ? e.fullpathPosix() : e.fullpath()\n      this.matchEmit(abs + mark)\n    } else {\n      const rel = this.opts.posix ? e.relativePosix() : e.relative()\n      const pre =\n        this.opts.dotRelative && !rel.startsWith('..' + this.#sep)\n          ? '.' + this.#sep\n          : ''\n      this.matchEmit(!rel ? '.' + mark : pre + rel + mark)\n    }\n  }\n\n  async match(e: Path, absolute: boolean, ifDir: boolean): Promise<void> {\n    const p = await this.matchCheck(e, ifDir)\n    if (p) this.matchFinish(p, absolute)\n  }\n\n  matchSync(e: Path, absolute: boolean, ifDir: boolean): void {\n    const p = this.matchCheckSync(e, ifDir)\n    if (p) this.matchFinish(p, absolute)\n  }\n\n  walkCB(target: Path, patterns: Pattern[], cb: () => any) {\n    /* c8 ignore start */\n    if (this.signal?.aborted) cb()\n    /* c8 ignore stop */\n    this.walkCB2(target, patterns, new Processor(this.opts), cb)\n  }\n\n  walkCB2(\n    target: Path,\n    patterns: Pattern[],\n    processor: Processor,\n    cb: () => any\n  ) {\n    if (this.#childrenIgnored(target)) return cb()\n    if (this.signal?.aborted) cb()\n    if (this.paused) {\n      this.onResume(() => this.walkCB2(target, patterns, processor, cb))\n      return\n    }\n    processor.processPatterns(target, patterns)\n\n    // done processing.  all of the above is sync, can be abstracted out.\n    // subwalks is a map of paths to the entry filters they need\n    // matches is a map of paths to [absolute, ifDir] tuples.\n    let tasks = 1\n    const next = () => {\n      if (--tasks === 0) cb()\n    }\n\n    for (const [m, absolute, ifDir] of processor.matches.entries()) {\n      if (this.#ignored(m)) continue\n      tasks++\n      this.match(m, absolute, ifDir).then(() => next())\n    }\n\n    for (const t of processor.subwalkTargets()) {\n      if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {\n        continue\n      }\n      tasks++\n      const childrenCached = t.readdirCached()\n      if (t.calledReaddir())\n        this.walkCB3(t, childrenCached, processor, next)\n      else {\n        t.readdirCB(\n          (_, entries) => this.walkCB3(t, entries, processor, next),\n          true\n        )\n      }\n    }\n\n    next()\n  }\n\n  walkCB3(\n    target: Path,\n    entries: Path[],\n    processor: Processor,\n    cb: () => any\n  ) {\n    processor = processor.filterEntries(target, entries)\n\n    let tasks = 1\n    const next = () => {\n      if (--tasks === 0) cb()\n    }\n\n    for (const [m, absolute, ifDir] of processor.matches.entries()) {\n      if (this.#ignored(m)) continue\n      tasks++\n      this.match(m, absolute, ifDir).then(() => next())\n    }\n    for (const [target, patterns] of processor.subwalks.entries()) {\n      tasks++\n      this.walkCB2(target, patterns, processor.child(), next)\n    }\n\n    next()\n  }\n\n  walkCBSync(target: Path, patterns: Pattern[], cb: () => any) {\n    /* c8 ignore start */\n    if (this.signal?.aborted) cb()\n    /* c8 ignore stop */\n    this.walkCB2Sync(target, patterns, new Processor(this.opts), cb)\n  }\n\n  walkCB2Sync(\n    target: Path,\n    patterns: Pattern[],\n    processor: Processor,\n    cb: () => any\n  ) {\n    if (this.#childrenIgnored(target)) return cb()\n    if (this.signal?.aborted) cb()\n    if (this.paused) {\n      this.onResume(() =>\n        this.walkCB2Sync(target, patterns, processor, cb)\n      )\n      return\n    }\n    processor.processPatterns(target, patterns)\n\n    // done processing.  all of the above is sync, can be abstracted out.\n    // subwalks is a map of paths to the entry filters they need\n    // matches is a map of paths to [absolute, ifDir] tuples.\n    let tasks = 1\n    const next = () => {\n      if (--tasks === 0) cb()\n    }\n\n    for (const [m, absolute, ifDir] of processor.matches.entries()) {\n      if (this.#ignored(m)) continue\n      this.matchSync(m, absolute, ifDir)\n    }\n\n    for (const t of processor.subwalkTargets()) {\n      if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {\n        continue\n      }\n      tasks++\n      const children = t.readdirSync()\n      this.walkCB3Sync(t, children, processor, next)\n    }\n\n    next()\n  }\n\n  walkCB3Sync(\n    target: Path,\n    entries: Path[],\n    processor: Processor,\n    cb: () => any\n  ) {\n    processor = processor.filterEntries(target, entries)\n\n    let tasks = 1\n    const next = () => {\n      if (--tasks === 0) cb()\n    }\n\n    for (const [m, absolute, ifDir] of processor.matches.entries()) {\n      if (this.#ignored(m)) continue\n      this.matchSync(m, absolute, ifDir)\n    }\n    for (const [target, patterns] of processor.subwalks.entries()) {\n      tasks++\n      this.walkCB2Sync(target, patterns, processor.child(), next)\n    }\n\n    next()\n  }\n}\n\nexport class GlobWalker<\n  O extends GlobWalkerOpts = GlobWalkerOpts\n> extends GlobUtil<O> {\n  matches: O extends GWOFileTypesTrue\n    ? Set<Path>\n    : O extends GWOFileTypesFalse\n    ? Set<string>\n    : O extends GWOFileTypesUnset\n    ? Set<string>\n    : Set<Path | string>\n\n  constructor(patterns: Pattern[], path: Path, opts: O) {\n    super(patterns, path, opts)\n    this.matches = new Set() as Matches<O>\n  }\n\n  matchEmit(e: Result<O>): void\n  matchEmit(e: Path | string): void {\n    this.matches.add(e)\n  }\n\n  async walk(): Promise<Matches<O>> {\n    if (this.signal?.aborted) throw this.signal.reason\n    if (this.path.isUnknown()) {\n      await this.path.lstat()\n    }\n    await new Promise((res, rej) => {\n      this.walkCB(this.path, this.patterns, () => {\n        if (this.signal?.aborted) {\n          rej(this.signal.reason)\n        } else {\n          res(this.matches)\n        }\n      })\n    })\n    return this.matches\n  }\n\n  walkSync(): Matches<O> {\n    if (this.signal?.aborted) throw this.signal.reason\n    if (this.path.isUnknown()) {\n      this.path.lstatSync()\n    }\n    // nothing for the callback to do, because this never pauses\n    this.walkCBSync(this.path, this.patterns, () => {\n      if (this.signal?.aborted) throw this.signal.reason\n    })\n    return this.matches\n  }\n}\n\nexport class GlobStream<\n  O extends GlobWalkerOpts = GlobWalkerOpts\n> extends GlobUtil<O> {\n  results: O extends GWOFileTypesTrue\n    ? Minipass<Path, Path>\n    : O extends GWOFileTypesFalse\n    ? Minipass<string, string>\n    : O extends GWOFileTypesUnset\n    ? Minipass<string, string>\n    : Minipass<Path | string, Path | string>\n\n  constructor(patterns: Pattern[], path: Path, opts: O) {\n    super(patterns, path, opts)\n    this.results = new Minipass({\n      signal: this.signal,\n      objectMode: true,\n    }) as MatchStream<O>\n    this.results.on('drain', () => this.resume())\n    this.results.on('resume', () => this.resume())\n  }\n\n  matchEmit(e: Result<O>): void\n  matchEmit(e: Path | string): void {\n    this.results.write(e)\n    if (!this.results.flowing) this.pause()\n  }\n\n  stream(): MatchStream<O> {\n    const target = this.path\n    if (target.isUnknown()) {\n      target.lstat().then(() => {\n        this.walkCB(target, this.patterns, () => this.results.end())\n      })\n    } else {\n      this.walkCB(target, this.patterns, () => this.results.end())\n    }\n    return this.results\n  }\n\n  streamSync(): MatchStream<O> {\n    if (this.path.isUnknown()) {\n      this.path.lstatSync()\n    }\n    this.walkCBSync(this.path, this.patterns, () => this.results.end())\n    return this.results\n  }\n}\n"]}